from typing import List
from jinja2 import Template


class TypeDesc:
    name: str
    scalar: bool  # 基础类型
    repeated: bool  # list
    alias: str = None  # api_dot_helloworld_dot_helloworld__pb2.TypeName
    map_alias: (str, str) = None  # (int32, api_dot_helloworld_dot_helloworld__pb2.TypeName)
    use: str = None  # from api.helloworld import helloworld_pb2 as api_dot_helloworld_dot_helloworld__pb2


class MethodDesc:
    # method
    name: str
    pascal_case_name: str
    snake_case_name: str
    request: TypeDesc = None
    response: TypeDesc = None
    comment: List[str]
    # http
    path: str
    method: str
    has_vars: bool
    has_body: bool
    body: str
    body_type: TypeDesc = None
    response_body: str
    response_body_type: TypeDesc = None


class ServiceDesc:
    entity_package: str  # hello_world_pd2
    name: str
    pascal_case_name: str  # HelloWorld
    snake_case_name: str  # hello_world
    metadata: str  # api/helloworld/helloworld.proto
    comment: List[str]
    methods: List[MethodDesc]


def execute(
        services: List[ServiceDesc],
        uses: List[str],
        has_vars: bool = False,
        has_repeated_scalar: bool = False,
        has_repeated_composite: bool = False,
        has_scalar_map: bool = False,
        has_message_map: bool = False
) -> str:
    template = Template(http_template)
    return template.render(
        services=services,
        uses=uses,
        has_vars=has_vars,
        has_repeated_scalar=has_repeated_scalar,
        has_repeated_composite=has_repeated_composite,
        has_scalar_map=has_scalar_map,
        has_message_map=has_message_map
    )


http_template = '''# Generated by the protoc-gen-http-python protocol compiler plugin. DO NOT EDIT!
"""HTTP server classes corresponding to protobuf-defined services."""
from typing import Callable as _Callable, Any as _Any, Dict as _Dict

{%- if has_repeated_scalar %}
from google.protobuf.internal.containers import RepeatedScalarFieldContainer as _RepeatedScalarFieldContainer
{%- endif %}
{%- if has_repeated_composite %}
from google.protobuf.internal.containers import RepeatedCompositeFieldContainer as _RepeatedCompositeFieldContainer
{%- endif %}
{%- if has_scalar_map %}
from google.protobuf.internal.containers import ScalarMap as _ScalarMap
{%- endif %}
{%- if has_message_map %}
from google.protobuf.internal.containers import MessageMap as _MessageMap
{%- endif %}
{%- if has_vars %}
from google.protobuf.json_format import ParseDict as _ParseDict
{%- endif %}
{% for use in uses %}
{{ use }}
{%- endfor %}

_RegisterFunction = _Callable[[str, str, _Callable[[_Dict[str, _Any], bytes], _Any]], _Any]
_RequestDeserializerFunction = _Callable[[_Any, bytes], _Any]
_ResponseSerializerFunction = _Callable[[_Any], _Any]


{%- for service in services %}


class {{ service.name }}Servicer(object):
    """
    {% for comment in service.comment -%}
    {{ comment }}
    {% endfor -%}
    """
    {%- for method in service.methods %}

    async def {{ method.name }}(
            self,
            request: {{ method.request.alias }}
    ) -> {{ method.response.alias }}:
        """
        {% for comment in method.comment -%}
        {{ comment }}
        {% endfor -%}
        """
        raise NotImplementedError('Method not implemented!')
    {%- endfor %}


def register_{{ service.snake_case_name }}_http_server(
        register: _RegisterFunction,
        servicer: {{ service.name }}Servicer,
        request_deserializer: _RequestDeserializerFunction,
        response_serializer: _ResponseSerializerFunction):
    service = {{ service.pascal_case_name }}(servicer, request_deserializer, response_serializer)
    {%- for method in service.methods %}
    register("{{ method.method }}", "{{ method.path }}", service.{{ method.snake_case_name }})
    {%- endfor %}


class {{ service.pascal_case_name }}(object):
    servicer: {{ service.name }}Servicer
    request_deserializer: _RequestDeserializerFunction
    response_serializer: _ResponseSerializerFunction

    def __init__(
            self,
            servicer: {{ service.name }}Servicer,
            request_deserializer: _RequestDeserializerFunction,
            response_serializer: _ResponseSerializerFunction):
        self.servicer = servicer
        self.request_deserializer = request_deserializer
        self.response_serializer = response_serializer

    {%- for method in service.methods %}

    async def {{ method.snake_case_name }}(self, {{- ' ' -}}
            {%- if method.has_vars %}path_params{% else %}_{% endif %}: _Dict[str, _Any], {{- ' ' -}}
            {%- if method.has_body %}body{% else %}__{% endif %}: bytes):
        _request = {{ method.request.alias }}()
        {%- if method.has_vars %}
        _ParseDict(path_params, _request)
        {%- endif %}
        {%- if method.has_body %}
        {%- if method.body is not defined or method.body == "" %}
        _request = self.request_deserializer(_request, body)
        assert isinstance(_request, {{ method.request.alias }})
        {%- else %}
        {%- if method.body_type.repeated %}
        _request_body = {{- ' ' -}}
            {%- if method.body_type.alias != None -%}
                {%- if method.body_type.scalar -%}
                    _RepeatedScalarFieldContainer
                {%- else -%}
                    _RepeatedCompositeFieldContainer
                {%- endif -%}
                [{{ method.body_type.alias }}]()
            {%- elif method.body_type.map_alias != None -%}
                {%- if method.body_type.scalar -%}
                    _ScalarMap
                {%- else -%}
                    _MessageMap
                {%- endif -%}
                [{{ method.body_type.map_alias.0 }}, {{ method.body_type.map_alias.1 }}]()
            {%- endif -%}
        {%- else %}
        _request_body = {{ method.body_type.alias }}()
        {%- endif %}
        _request_body = self.request_deserializer(_request_body, body)
        _request.{{ method.body }} = _request_body
        {%- endif %}
        {%- endif %}
        {%- if method.response_body is not defined or method.response_body == "" %}
        _response = await self.servicer.{{ method.name }}(_request)
        {%- else %}
        _response = await self.servicer.{{ method.name }}(_request).{{ method.response_body }}
        {%- endif %}
        return self.response_serializer(_response)
    {%- endfor %}

{%- endfor %}

'''
